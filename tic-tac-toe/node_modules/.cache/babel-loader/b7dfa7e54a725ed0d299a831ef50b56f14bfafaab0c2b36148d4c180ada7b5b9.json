{"ast":null,"code":"var _jsxFileName = \"H:\\\\ReactNativeTutorials\\\\tic-tac-toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport Players from './components/Players';\nimport GameBoard from './components/GameBoard';\nimport GameLogs from './components/GameLogs';\nimport YouWonTheMatch from \"./components/YouWonTheMatch\";\nimport { WINNING_COMBINATIONS } from './components/winning-combinations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultBoard = [[null, null, null], [null, null, null], [null, null, null]];\nfunction App() {\n  _s();\n  let gamebaord = [...defaultBoard.map(array => [...array])];\n  const [gameturns, setGameTurns] = useState([]);\n  const [activePlayer, setActivePlayer] = useState(\"X\");\n  const [players, setPlayers] = useState({\n    X: \"Player 1\",\n    O: \"Player 2\"\n  });\n  for (const turn of gameturns) {\n    const {\n      square,\n      player\n    } = turn;\n    const {\n      row,\n      col\n    } = square;\n    gamebaord[row][col] = player;\n  }\n  let gameWinner;\n  for (const combination of WINNING_COMBINATIONS) {\n    const firstCombination = gamebaord[combination[0].row][combination[0].column];\n    const secondCombination = gamebaord[combination[1].row][combination[1].column];\n    const thirdCombination = gamebaord[combination[2].row][combination[2].column];\n    if (firstCombination && firstCombination === secondCombination && firstCombination === thirdCombination) {\n      gameWinner = players[firstCombination];\n    }\n  }\n  const matchDrow = gameturns.length === 9 && !gameWinner;\n  function updateActivePlayer(rowIndex, colIndex) {\n    setActivePlayer(currActPlys => currActPlys === \"X\" ? \"O\" : \"X\");\n    setGameTurns(prevTurn => {\n      let currentActPlayer = \"X\";\n      if (prevTurn.length > 0 && prevTurn[0].player === \"X\") {\n        currentActPlayer = \"O\";\n      }\n      const updatedTurns = [{\n        square: {\n          row: rowIndex,\n          col: colIndex\n        },\n        player: currentActPlayer\n      }, ...prevTurn];\n      return updatedTurns;\n    });\n  }\n  function handleRestart() {\n    setGameTurns([]);\n  }\n  function handlePlayerNameChange(symbol, Name) {\n    setPlayers(prevPlayer => {\n      return {\n        ...prevPlayer,\n        [symbol]: Name\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n        id: \"players\",\n        className: \"highlight-player\",\n        children: [/*#__PURE__*/_jsxDEV(Players, {\n          initialName: \"Player 1\",\n          Symbol: \"X\",\n          isActive: activePlayer === \"X\",\n          onChangeName: handlePlayerNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Players, {\n          initialName: \"Player 2\",\n          Symbol: \"O\",\n          isActive: activePlayer === \"O\",\n          onChangeName: handlePlayerNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), (gameWinner || matchDrow) && /*#__PURE__*/_jsxDEV(YouWonTheMatch, {\n        winner: gameWinner,\n        callback: handleRestart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        onSelectSquare: updateActivePlayer,\n        gamebaord: gamebaord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameLogs, {\n      gameturns: gameturns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BlOW1cwGQgkNyF/+IKbVPtrH11s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Players","GameBoard","GameLogs","YouWonTheMatch","WINNING_COMBINATIONS","jsxDEV","_jsxDEV","defaultBoard","App","_s","gamebaord","map","array","gameturns","setGameTurns","activePlayer","setActivePlayer","players","setPlayers","X","O","turn","square","player","row","col","gameWinner","combination","firstCombination","column","secondCombination","thirdCombination","matchDrow","length","updateActivePlayer","rowIndex","colIndex","currActPlys","prevTurn","currentActPlayer","updatedTurns","handleRestart","handlePlayerNameChange","symbol","Name","prevPlayer","children","fileName","_jsxFileName","lineNumber","columnNumber","id","className","initialName","Symbol","isActive","onChangeName","winner","callback","onSelectSquare","_c","$RefreshReg$"],"sources":["H:/ReactNativeTutorials/tic-tac-toe/src/App.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport Players from './components/Players';\nimport GameBoard from './components/GameBoard';\nimport GameLogs from './components/GameLogs';\nimport YouWonTheMatch from \"./components/YouWonTheMatch\";\nimport { WINNING_COMBINATIONS } from './components/winning-combinations';\n\n\nconst defaultBoard = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null]\n];\n\nfunction App() {\n  let gamebaord = [...defaultBoard.map(array => [...array])];\n\n  const [gameturns, setGameTurns] = useState([]);\n  const [activePlayer, setActivePlayer] = useState(\"X\");\n  const [players, setPlayers] = useState({\n    X: \"Player 1\",\n    O: \"Player 2\",\n  });\n  for (const turn of gameturns) {\n    const { square, player } = turn;\n    const { row, col } = square;\n    gamebaord[row][col] = player;\n  }\n  let gameWinner;\n  for (const combination of WINNING_COMBINATIONS) {\n    const firstCombination = gamebaord[combination[0].row][combination[0].column];\n    const secondCombination = gamebaord[combination[1].row][combination[1].column];\n    const thirdCombination = gamebaord[combination[2].row][combination[2].column];\n    if (firstCombination &&\n      firstCombination === secondCombination &&\n      firstCombination === thirdCombination) {\n      gameWinner = players[firstCombination];\n    }\n  }\n\n  const matchDrow = gameturns.length === 9 && !gameWinner;\n\n  function updateActivePlayer(rowIndex, colIndex) {\n    setActivePlayer((currActPlys) => currActPlys === \"X\" ? \"O\" : \"X\");\n    setGameTurns(\n      prevTurn => {\n        let currentActPlayer = \"X\";\n        if (prevTurn.length > 0 && prevTurn[0].player === \"X\") {\n          currentActPlayer = \"O\";\n        }\n        const updatedTurns = [\n          { square: { row: rowIndex, col: colIndex }, player: currentActPlayer },\n          ...prevTurn,\n        ];\n        return updatedTurns;\n      });\n  }\n\n  function handleRestart() {\n    setGameTurns([]);\n  }\n\n  function handlePlayerNameChange(symbol, Name) {\n    setPlayers(prevPlayer => {\n      return {\n        ...prevPlayer,\n        [symbol]: Name,\n      }\n    })\n  }\n  return (\n    <main>\n      <Header></Header>\n      <div id=\"game-container\">\n        <ol id=\"players\" className=\"highlight-player\">\n          <Players initialName=\"Player 1\" Symbol=\"X\" isActive={activePlayer === \"X\"} onChangeName={handlePlayerNameChange}></Players>\n          <Players initialName=\"Player 2\" Symbol=\"O\" isActive={activePlayer === \"O\"} onChangeName={handlePlayerNameChange}></Players>\n        </ol>\n        {(gameWinner || matchDrow) && <YouWonTheMatch winner={gameWinner} callback={handleRestart} />}\n        <GameBoard onSelectSquare={updateActivePlayer} gamebaord={gamebaord}></GameBoard>\n      </div>\n      <GameLogs gameturns={gameturns}></GameLogs>\n    </main>\n\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}