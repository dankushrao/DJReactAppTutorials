{"ast":null,"code":"var _jsxFileName = \"H:\\\\ReactNativeTutorials\\\\tic-tac-toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport Players from './components/Players';\nimport GameBoard from './components/GameBoard';\nimport GameLogs from './components/GameLogs';\nimport { WINNING_COMBINATIONS } from './components/winning-combinations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultBoard = [[null, null, null], [null, null, null], [null, null, null]];\nfunction App() {\n  _s();\n  const [gameturns, setGameTurns] = useState([]);\n  const [activePlayer, setActivePlayer] = useState(\"X\");\n  let gamebaord = defaultBoard;\n  for (const turn of gameturns) {\n    const {\n      square,\n      player\n    } = turn;\n    const {\n      row,\n      col\n    } = square;\n    gamebaord[row][col] = player;\n  }\n  let gameWinner;\n  for (const combination of WINNING_COMBINATIONS) {\n    const firstCombination = gamebaord[combination[0].row][combination[0].column];\n    const secondCombination = gamebaord[combination[1].row][combination[1].column];\n    const thirdCombination = gamebaord[combination[2].row][combination[2].column];\n    if (firstCombination && firstCombination === secondCombination && firstCombination === thirdCombination) {\n      gameWinner = firstCombination;\n    }\n  }\n  function updateActivePlayer(rowIndex, colIndex) {\n    setActivePlayer(currActPlys => currActPlys === \"X\" ? \"O\" : \"X\");\n    setGameTurns(prevTurn => {\n      let currentActPlayer = \"X\";\n      if (prevTurn.length > 0 && prevTurn[0].player === \"X\") {\n        currentActPlayer = \"O\";\n      }\n      const updatedTurns = [{\n        square: {\n          row: rowIndex,\n          col: colIndex\n        },\n        player: currentActPlayer\n      }, ...prevTurn];\n      return updatedTurns;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n        id: \"players\",\n        className: \"highlight-player\",\n        children: [/*#__PURE__*/_jsxDEV(Players, {\n          initialName: \"Player 1\",\n          Symbol: \"X\",\n          isActive: activePlayer === \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Players, {\n          initialName: \"Player 2\",\n          Symbol: \"O\",\n          isActive: activePlayer === \"O\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), gameWinner && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" You Won the Game !!! \", gameWinner]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        onSelectSquare: updateActivePlayer,\n        gamebaord: gamebaord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameLogs, {\n      gameturns: gameturns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bBJCytkcVPrUZNIJgERRvtAmrYc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Players","GameBoard","GameLogs","WINNING_COMBINATIONS","jsxDEV","_jsxDEV","defaultBoard","App","_s","gameturns","setGameTurns","activePlayer","setActivePlayer","gamebaord","turn","square","player","row","col","gameWinner","combination","firstCombination","column","secondCombination","thirdCombination","updateActivePlayer","rowIndex","colIndex","currActPlys","prevTurn","currentActPlayer","length","updatedTurns","children","fileName","_jsxFileName","lineNumber","columnNumber","id","className","initialName","Symbol","isActive","onSelectSquare","_c","$RefreshReg$"],"sources":["H:/ReactNativeTutorials/tic-tac-toe/src/App.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport Players from './components/Players';\nimport GameBoard from './components/GameBoard';\nimport GameLogs from './components/GameLogs';\nimport { WINNING_COMBINATIONS } from './components/winning-combinations';\n\nconst defaultBoard = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null]\n];\n\nfunction App() {\n  const [gameturns, setGameTurns] = useState([]);\n  const [activePlayer, setActivePlayer] = useState(\"X\");\n\n  let gamebaord = defaultBoard;\n\n  for (const turn of gameturns) {\n    const { square, player } = turn;\n    const { row, col } = square;\n    gamebaord[row][col] = player;\n  }\n  let gameWinner;\n  for (const combination of WINNING_COMBINATIONS) {\n    const firstCombination = gamebaord[combination[0].row][combination[0].column];\n    const secondCombination = gamebaord[combination[1].row][combination[1].column];\n    const thirdCombination = gamebaord[combination[2].row][combination[2].column];\n    if (firstCombination &&\n      firstCombination === secondCombination &&\n      firstCombination === thirdCombination) {\n      gameWinner = firstCombination;\n    }\n  }\n\n  function updateActivePlayer(rowIndex, colIndex) {\n    setActivePlayer((currActPlys) => currActPlys === \"X\" ? \"O\" : \"X\");\n\n    setGameTurns(\n      prevTurn => {\n        let currentActPlayer = \"X\";\n        if (prevTurn.length > 0 && prevTurn[0].player === \"X\") {\n          currentActPlayer = \"O\";\n        }\n        const updatedTurns = [\n          { square: { row: rowIndex, col: colIndex }, player: currentActPlayer },\n          ...prevTurn,\n        ];\n        return updatedTurns;\n      });\n  }\n\n  return (\n    <main>\n      <Header></Header>\n      <div id=\"game-container\">\n        <ol id=\"players\" className=\"highlight-player\">\n          <Players initialName=\"Player 1\" Symbol=\"X\" isActive={activePlayer === \"X\"}></Players>\n          <Players initialName=\"Player 2\" Symbol=\"O\" isActive={activePlayer === \"O\"}></Players>\n        </ol>\n        {gameWinner && <p> You Won the Game !!! {gameWinner }</p>}\n        <GameBoard onSelectSquare={updateActivePlayer} gamebaord={gamebaord}></GameBoard>\n      </div>\n      <GameLogs gameturns={gameturns}></GameLogs>\n    </main>\n\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}